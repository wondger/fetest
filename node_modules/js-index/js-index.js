var spawn = require("child_process").spawn,
	jsp = require("uglify-js").parser,
	pro = require("uglify-js").uglify;

var itemSep = "===qinian==={start}===",
	nameFuncSep = "===qinian===name-{func}===",
	callback,
	phantom,
	resultArr = [],
	result = "";


function libIndex(path, entry, callbk) {
    phantom = spawn("phantomjs", ["/Users/o/node/NodeJS/node_modules/js-index/bin/phantom_main.js", path, entry, itemSep, nameFuncSep]);
	//phantom = spawn("pwd");
	callback = callbk;

    console.log('=======libIndex=======');
    console.log(path);
    console.log(entry);

	phantom.stdout.on("data", function(data) {
        result += data;
	});

	phantom.on("exit", function(code) {
		if (code === 1) {
			console.log("~~~ error code: ", code);
			console.log(result);
			callback("error throwed from phantomJs");
		} else {
			var data = result,
				dataArr = data.split(itemSep),
				dataLen = dataArr.length;

	        console.log("-------------", code);		
    //console.log(dataLen);
			for (var i = 1; i < dataLen; i++) {
				var itemStr = dataArr[i],
					itemArr = itemStr.split(nameFuncSep),
					beautiful = itemArr[1],
					beautifulBody,
					neat,
					obj;

					beautifulBody = "function x() " + beautiful.slice(beautiful.indexOf("{"), beautiful.length);
					try {
						neat = pro.gen_code(jsp.parse(beautifulBody));
					} catch (ex) {
						//debugger;
						console.log("=== exception start");
						console.log(ex.message);
						console.log(beautiful);
						neat = "";
						console.log("=== exception end");
					}
					
					obj = setFuncMap(itemArr[0], "method", neat, "N/A", "N/A", beautiful);
					resultArr.push(obj);
				
			}
            console.dir(resultArr);
			callback(undefined, resultArr);
		}
	});
}

function setFuncMap(name, type, key, startLine, endLine, definition) {
	var obj = {
		"name": name,
		"type": type,
		"key": key,
		"ln": {
			"start": startLine,
			"end": endLine
		},
		"definition": definition
	};
	return obj;
}


exports.libIndex = libIndex;
